# -*- coding: utf-8 -*-
"""Complex Systems Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sRJ2By36Vph0NLQ4ugnXRO3ZXIeXCAgM
"""

from pylab import *
from IPython import display
import networkx as nx
import time
import numpy as np
import random
import pandas as pd
import math
df = pd.read_excel('California County List.xlsx',usecols="A:AA")
#df = pd.read_excel('/home/California County List.xlsx',usecols="A:AA")
g = nx.Graph()

def initialize():
  global g, nextg, prev

  Nodes = list(range(len(df['Latitude']))) # number of counties (58)
  pos = {}
  R = 6371 # for conversion from lon/lat to cartercian
  for i in range(len(Nodes)):
    pos[Nodes[i]] = (df['Longitude'][i],df['Latitude'][i])
    g.add_node(Nodes[i],pos=pos[i])


  for node in Nodes:
    borderList = []
    strToNum = ''
    i = 0
    for char in df['borders'][node]:
      i+=1
      if char != ',':
        strToNum += char
      if(char == ',' or i == len(df['borders'][node])):
        borderList.append(int(strToNum))
        strToNum = ''
    #print('Node:',node ,'borderList:',borderList)
    for county in borderList:
      e = (node,county-1) #when counted counties are listed 1-58 vs Node list 0-57
      g.add_edge(*e)

  nx.draw(g,pos,node_size=10,node_color='b', edge_color='r')
  
  #list of attributes
  #1) initial fire
  #2) fire probability
  #3) Dairy Yield
  #4) Almond Yield
  #5) Grape Yield
  #6) Pistachio Yield
  #7) Cattle Yield
  #8) Lettuce Yield
  #9) Strawberry Yield
  #10) Tomato Yield
  #11) Walnut Yield

  
  #https://www.cdfa.ca.gov/Statistics/PDFs/2020_Ag_Stats_Review.pdf
  # $/lb
  dairyPrice = 0.1578
  almondPrice = 2.43
  grapePrice = 0.423
  pistachiosPrice = 2.62
  cattlePrice = 1899.75 #price per head (slaughtered)
  lettucePrice = 0.329
  strawberryPrice = 1.08
  tomatoPrice = 0.051
  walnutPrice = 0.985

  
  #Capacity is determined by Node with Max Yield in any Commodity

  fireProb = df['Observed Fire Prob']
  #fireProb = df['Predicted Fire Prob']

  attributes = {i: {'onFire':0 ,
                    'firstFire':False,
                    'fireProb':fireProb[i],
                    'dairyYield':df['Dairy Yield'][i],
                    'almondYield':df['Almond Yield'][i],
                    'grapeYield':df['Grape Yield'][i],
                    'pistachioYield':df['Pistachio Yield'][i],
                    'cattleYield':df['Cattle Yield'][i], 
                    'lettuceYield':df['Lettuce Yield'][i],
                    'strawberryYield':df['Strawberry Yield'][i],
                    'tomatoYield':df['Tomato Yield'][i],
                    'walnutYield':df['Walnut Yield'][i]} for i in g.nodes()}
  nx.set_node_attributes(g,attributes)

def update():
    global g, nextg, stable, failure,totFail
    
    # Update network model
    curprev = 0
    nextg = g.copy()
    nextg.pos = g.pos

    for a in g.nodes:
      if g.nodes[a]['onFire'] == False : #able to catch on fire
        nextg.nodes[a]['OnFire'] = False
        
      for b in g.neighbors(a):
        if g.nodes[b]['onFire'] == True and g.nodes[b]['firstFire'] == True: # if neighbor b is on Fire
          nextg.nodes[a]['onFire']  = 1
      
    g = nextg.copy()
    g.pos = nextg.pos

def observe():
    global g, prev, prev_mf, susc_mf
    cla()
    nx.draw(g, cmap = cm.plasma, vmin = 0, vmax = 2,
            node_color = [g.nodes[i]['state'] for i in g.nodes],
            pos = g.pos)
    x = 'beta:' + str(beta)
    plt.title(x)
    plt.show()